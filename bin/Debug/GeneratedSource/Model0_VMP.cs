// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 07:38 on marted√¨ 6 giugno 2017.
	/// </remarks>
	public partial class Model0_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vGaussian__1 property</summary>
		private Gaussian[] VGaussian__1;
		/// <summary>Field backing the vGamma__1 property</summary>
		private Gamma[] VGamma__1;
		/// <summary>Field backing the vDirichlet1 property</summary>
		private Dirichlet VDirichlet1;
		/// <summary>The number of iterations last computed by Changed_vGaussian__1_vGamma__1_vDirichlet1. Set this to zero to force re-execution of Changed_vGaussian__1_vGamma__1_vDirichlet1</summary>
		public int Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1</summary>
		public int Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1</summary>
		public int Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1</summary>
		public bool Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised;
		/// <summary>The number of iterations last computed by Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1. Set this to zero to force re-execution of Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1</summary>
		public int Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_iterationsDone;
		/// <summary>True if Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1 has performed initialisation. Set this to false to force re-execution of Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1</summary>
		public bool Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised;
		/// <summary>Message from use of 'vVector1'</summary>
		public Dirichlet vVector1_use_B;
		/// <summary>Message from use of 'vdouble__3'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__3_use_B;
		/// <summary>Message from use of 'vdouble__4'</summary>
		public DistributionStructArray<Gamma,double> vdouble__4_use_B;
		public Discrete vint9_selector_B;
		/// <summary>Message to marginal of 'vdouble__3'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__3_marginal_F;
		/// <summary>Message to marginal of 'vVector1'</summary>
		public Dirichlet vVector1_marginal_F;
		/// <summary>Message to marginal of 'vdouble__4'</summary>
		public DistributionStructArray<Gamma,double> vdouble__4_marginal_F;
		/// <summary>Message to marginal of 'vint9'</summary>
		public Discrete vint9_marginal_F;
		public Gaussian vdouble17_F;
		public PointMass<Gaussian[]> vGaussian__1_marginal;
		public PointMass<Gamma[]> vGamma__1_marginal;
		public PointMass<Dirichlet> vDirichlet1_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__1'</summary>
		public Gaussian[] vGaussian__1
		{
			get {
				return this.VGaussian__1;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'vGaussian__1\'");
				}
				this.VGaussian__1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
				this.Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vGamma__1'</summary>
		public Gamma[] vGamma__1
		{
			get {
				return this.VGamma__1;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'vGamma__1\'");
				}
				this.VGamma__1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
				this.Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vDirichlet1'</summary>
		public Dirichlet vDirichlet1
		{
			get {
				return this.VDirichlet1;
			}
			set {
				this.VDirichlet1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_iterationsDone = 0;
				this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
				this.Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vGaussian__1") {
				return this.vGaussian__1;
			}
			if (variableName=="vGamma__1") {
				return this.vGamma__1;
			}
			if (variableName=="vDirichlet1") {
				return this.vDirichlet1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vGaussian__1") {
				this.vGaussian__1 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGamma__1") {
				this.vGamma__1 = (Gamma[])value;
				return ;
			}
			if (variableName=="vDirichlet1") {
				this.vDirichlet1 = (Dirichlet)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__3") {
				return this.Vdouble__3Marginal();
			}
			if (variableName=="vdouble__4") {
				return this.Vdouble__4Marginal();
			}
			if (variableName=="vVector1") {
				return this.VVector1Marginal();
			}
			if (variableName=="vint9") {
				return this.Vint9Marginal();
			}
			if (variableName=="vdouble17") {
				return this.Vdouble17Marginal();
			}
			if (variableName=="vGaussian__1") {
				return this.VGaussian__1Marginal();
			}
			if (variableName=="vGamma__1") {
				return this.VGamma__1Marginal();
			}
			if (variableName=="vDirichlet1") {
				return this.VDirichlet1Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone) {
				this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
			}
			this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1(initialise);
			this.Constant();
			this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1(initialise);
			this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1(numberOfIterations);
			this.Changed_vGaussian__1_vGamma__1_vDirichlet1();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that depend on the observed value of vDirichlet1 and must reset on changes to numberOfIterationsDecreased and vGamma__1 and vGaussian__1</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1(bool initialise)
		{
			if ((this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_iterationsDone==1)&&((!initialise)||this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised)) {
				return ;
			}
			this.vVector1_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.VDirichlet1);
			this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_iterationsDone = 1;
			this.Changed_vDirichlet1_Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// Create array for 'vdouble__3_use' Backwards messages.
			this.vdouble__3_use_B = new DistributionStructArray<Gaussian,double>(2);
			// Create array for 'vdouble__4_use' Backwards messages.
			this.vdouble__4_use_B = new DistributionStructArray<Gamma,double>(2);
			this.Constant_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and vGamma__1 and vGaussian__1 and vDirichlet1</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised)) {
				return ;
			}
			for(int index2 = 0; index2<2; index2++) {
				this.vdouble__3_use_B[index2] = Gaussian.Uniform();
				this.vdouble__4_use_B[index2] = Gamma.Uniform();
			}
			this.vint9_selector_B = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGamma__1 and vGaussian__1 and vDirichlet1</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone==numberOfIterations) {
				return ;
			}
			// Create array for 'vdouble__3_marginal' Forwards messages.
			this.vdouble__3_marginal_F = new DistributionStructArray<Gaussian,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				this.vdouble__3_marginal_F[index2] = Gaussian.Uniform();
			}
			this.vVector1_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.VDirichlet1);
			Discrete vint9_F = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			Discrete[] vint9_selector_uses_B = default(Discrete[]);
			// Create array for 'vint9_selector_uses' Backwards messages.
			vint9_selector_uses_B = new Discrete[3];
			for(int _ind = 0; _ind<3; _ind++) {
				vint9_selector_uses_B[_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			DistributionStructArray<Bernoulli,bool>[] vint9_selector_cases_uses_B = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'vint9_selector_cases_uses' Backwards messages.
			vint9_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[2];
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'vint9_selector_cases_uses' Backwards messages.
				vint9_selector_cases_uses_B[_ind] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _iv = 0; _iv<2; _iv++) {
					vint9_selector_cases_uses_B[_ind][_iv] = Bernoulli.Uniform();
				}
			}
			DistributionStructArray<Bernoulli,bool>[] vint9_selector_cases_depth1_uses_B = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'vint9_selector_cases_depth1_uses' Backwards messages.
			vint9_selector_cases_depth1_uses_B = new DistributionStructArray<Bernoulli,bool>[2];
			for(int _iv = 0; _iv<2; _iv++) {
				// Create array for 'vint9_selector_cases_depth1_uses' Backwards messages.
				vint9_selector_cases_depth1_uses_B[_iv] = new DistributionStructArray<Bernoulli,bool>(10);
				for(int _ind = 0; _ind<10; _ind++) {
					vint9_selector_cases_depth1_uses_B[_iv][_ind] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vdouble17__index2__F'
			DistributionStructArray<Gaussian,double> vdouble17__index2__F = new DistributionStructArray<Gaussian,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				vdouble17__index2__F[index2] = Gaussian.Uniform();
			}
			// Message from use of 'vdouble17'
			Gaussian vdouble17_use_B = Gaussian.Uniform();
			// Message to marginal of 'vdouble17__index2_'
			// Create array for replicates of 'vdouble17__index2__marginal_F'
			DistributionStructArray<Gaussian,double> vdouble17__index2__marginal_F = new DistributionStructArray<Gaussian,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				vdouble17__index2__marginal_F[index2] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__4_index2__B'
			DistributionStructArray<Gamma,double> vdouble__4_index2__B = new DistributionStructArray<Gamma,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				vdouble__4_index2__B[index2] = Gamma.Uniform();
			}
			// Create array for 'vdouble__4_marginal' Forwards messages.
			this.vdouble__4_marginal_F = new DistributionStructArray<Gamma,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				this.vdouble__4_marginal_F[index2] = Gamma.Uniform();
			}
			DistributionStructArray<Bernoulli,bool> vint9_selector_cases_depth1_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vint9_selector_cases_depth1' Backwards messages.
			vint9_selector_cases_depth1_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				vint9_selector_cases_depth1_B[_iv] = Bernoulli.Uniform();
			}
			DistributionStructArray<Bernoulli,bool> vint9_selector_cases_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vint9_selector_cases' Backwards messages.
			vint9_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				vint9_selector_cases_B[_iv] = Bernoulli.Uniform();
			}
			this.vint9_marginal_F = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			// Create array for replicates of 'vdouble__3_index2__B'
			DistributionStructArray<Gaussian,double> vdouble__3_index2__B = new DistributionStructArray<Gaussian,double>(2);
			for(int index2 = 0; index2<2; index2++) {
				vdouble__3_index2__B[index2] = Gaussian.Uniform();
				// Message to 'vdouble__3_marginal' from Variable factor
				this.vdouble__3_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(this.vdouble__3_use_B[index2], this.VGaussian__1[index2], this.vdouble__3_marginal_F[index2]);
				// Message to 'vdouble__4_marginal' from Variable factor
				this.vdouble__4_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gamma>(this.vdouble__4_use_B[index2], this.VGamma__1[index2], this.vdouble__4_marginal_F[index2]);
				// Message to 'vdouble17__index2_' from Gaussian factor
				vdouble17__index2__F[index2] = GaussianOp.SampleAverageLogarithm(this.vdouble__3_marginal_F[index2], this.vdouble__4_marginal_F[index2]);
				// Message to 'vdouble17__index2__marginal' from Variable factor
				vdouble17__index2__marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(vdouble17_use_B, vdouble17__index2__F[index2], vdouble17__index2__marginal_F[index2]);
			}
			// Message to 'vVector1_marginal' from Variable factor
			this.vVector1_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector1_use_B, this.VDirichlet1, this.vVector1_marginal_F);
			// Message to 'vint9' from Discrete factor
			vint9_F = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector1_marginal_F, vint9_F);
			// Message to 'vint9_marginal' from Variable factor
			this.vint9_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint9_selector_B, vint9_F, this.vint9_marginal_F);
			for(int iteration = this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index2 = 0; index2<2; index2++) {
					// Message to 'vdouble__4_marginal' from Variable factor
					this.vdouble__4_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gamma>(this.vdouble__4_use_B[index2], this.VGamma__1[index2], this.vdouble__4_marginal_F[index2]);
					// Message to 'vdouble__3_index2_' from Gaussian factor
					vdouble__3_index2__B[index2] = GaussianOp.MeanAverageLogarithm(vdouble17__index2__marginal_F[index2], this.vdouble__4_marginal_F[index2]);
					// Message to 'vdouble__3_use' from EnterOne factor
					this.vdouble__3_use_B[index2] = GateEnterOneOp<double>.ValueAverageLogarithm<Gaussian>(vdouble__3_index2__B[index2], this.vint9_marginal_F, index2, this.vdouble__3_use_B[index2]);
					// Message to 'vdouble__3_marginal' from Variable factor
					this.vdouble__3_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(this.vdouble__3_use_B[index2], this.VGaussian__1[index2], this.vdouble__3_marginal_F[index2]);
					// Message to 'vdouble17__index2_' from Gaussian factor
					vdouble17__index2__F[index2] = GaussianOp.SampleAverageLogarithm(this.vdouble__3_marginal_F[index2], this.vdouble__4_marginal_F[index2]);
					// Message to 'vdouble17__index2__marginal' from Variable factor
					vdouble17__index2__marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(vdouble17_use_B, vdouble17__index2__F[index2], vdouble17__index2__marginal_F[index2]);
					// Message to 'vint9_selector_cases_depth1_uses' from Variable factor
					vint9_selector_cases_depth1_uses_B[index2][8] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Gaussian>(vdouble17__index2__marginal_F[index2]));
					// Message to 'vint9_selector_cases_depth1_uses' from Gaussian factor
					vint9_selector_cases_depth1_uses_B[index2][7] = Bernoulli.FromLogOdds(GaussianOp.AverageLogFactor(vdouble17__index2__marginal_F[index2], this.vdouble__3_marginal_F[index2], this.vdouble__4_marginal_F[index2]));
				}
				for(int _iv = 0; _iv<2; _iv++) {
					// Message to 'vint9_selector_cases_depth1' from Replicate factor
					vint9_selector_cases_depth1_B[_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint9_selector_cases_depth1_uses_B[_iv], vint9_selector_cases_depth1_B[_iv]);
					// Message to 'vint9_selector_cases_uses' from Copy factor
					vint9_selector_cases_uses_B[0][_iv] = ArrayHelper.SetTo<Bernoulli>(vint9_selector_cases_uses_B[0][_iv], vint9_selector_cases_depth1_B[_iv]);
				}
				// Message to 'vint9_selector_cases' from Replicate factor
				vint9_selector_cases_B = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(vint9_selector_cases_uses_B, vint9_selector_cases_B);
				// Message to 'vint9_selector_uses' from CasesInt factor
				vint9_selector_uses_B[0] = IntCasesOp.IAverageLogarithm(vint9_selector_cases_B, vint9_selector_uses_B[0]);
				// Message to 'vint9_selector' from Replicate factor
				this.vint9_selector_B = ReplicateOp.DefAverageLogarithm<Discrete>(vint9_selector_uses_B, this.vint9_selector_B);
				// Message to 'vVector1_marginal' from Variable factor
				this.vVector1_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector1_use_B, this.VDirichlet1, this.vVector1_marginal_F);
				// Message to 'vint9' from Discrete factor
				vint9_F = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector1_marginal_F, vint9_F);
				// Message to 'vint9_marginal' from Variable factor
				this.vint9_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint9_selector_B, vint9_F, this.vint9_marginal_F);
				for(int index2 = 0; index2<2; index2++) {
					// Message to 'vdouble__4_index2_' from Gaussian factor
					vdouble__4_index2__B[index2] = GaussianOp.PrecisionAverageLogarithm(vdouble17__index2__marginal_F[index2], this.vdouble__3_marginal_F[index2]);
					// Message to 'vdouble__4_use' from EnterOne factor
					this.vdouble__4_use_B[index2] = GateEnterOneOp<double>.ValueAverageLogarithm<Gamma>(vdouble__4_index2__B[index2], this.vint9_marginal_F, index2, this.vdouble__4_use_B[index2]);
				}
				// Message to 'vVector1_use' from Discrete factor
				this.vVector1_use_B = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint9_marginal_F, this.vVector1_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index2 = 0; index2<2; index2++) {
				// Message to 'vdouble__3_index2_' from Gaussian factor
				vdouble__3_index2__B[index2] = GaussianOp.MeanAverageLogarithm(vdouble17__index2__marginal_F[index2], this.vdouble__4_marginal_F[index2]);
				// Message to 'vdouble__3_use' from EnterOne factor
				this.vdouble__3_use_B[index2] = GateEnterOneOp<double>.ValueAverageLogarithm<Gaussian>(vdouble__3_index2__B[index2], this.vint9_marginal_F, index2, this.vdouble__3_use_B[index2]);
				// Message to 'vdouble__3_marginal' from Variable factor
				this.vdouble__3_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(this.vdouble__3_use_B[index2], this.VGaussian__1[index2], this.vdouble__3_marginal_F[index2]);
				// Message to 'vint9_selector_cases_depth1_uses' from Gaussian factor
				vint9_selector_cases_depth1_uses_B[index2][7] = Bernoulli.FromLogOdds(GaussianOp.AverageLogFactor(vdouble17__index2__marginal_F[index2], this.vdouble__3_marginal_F[index2], this.vdouble__4_marginal_F[index2]));
			}
			for(int _iv = 0; _iv<2; _iv++) {
				// Message to 'vint9_selector_cases_depth1' from Replicate factor
				vint9_selector_cases_depth1_B[_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint9_selector_cases_depth1_uses_B[_iv], vint9_selector_cases_depth1_B[_iv]);
				// Message to 'vint9_selector_cases_uses' from Copy factor
				vint9_selector_cases_uses_B[0][_iv] = ArrayHelper.SetTo<Bernoulli>(vint9_selector_cases_uses_B[0][_iv], vint9_selector_cases_depth1_B[_iv]);
			}
			// Message to 'vint9_selector_cases' from Replicate factor
			vint9_selector_cases_B = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(vint9_selector_cases_uses_B, vint9_selector_cases_B);
			// Message to 'vint9_selector_uses' from CasesInt factor
			vint9_selector_uses_B[0] = IntCasesOp.IAverageLogarithm(vint9_selector_cases_B, vint9_selector_uses_B[0]);
			// Message to 'vint9_selector' from Replicate factor
			this.vint9_selector_B = ReplicateOp.DefAverageLogarithm<Discrete>(vint9_selector_uses_B, this.vint9_selector_B);
			// Message to 'vint9_marginal' from Variable factor
			this.vint9_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint9_selector_B, vint9_F, this.vint9_marginal_F);
			for(int index2 = 0; index2<2; index2++) {
				// Message to 'vdouble__4_index2_' from Gaussian factor
				vdouble__4_index2__B[index2] = GaussianOp.PrecisionAverageLogarithm(vdouble17__index2__marginal_F[index2], this.vdouble__3_marginal_F[index2]);
				// Message to 'vdouble__4_use' from EnterOne factor
				this.vdouble__4_use_B[index2] = GateEnterOneOp<double>.ValueAverageLogarithm<Gamma>(vdouble__4_index2__B[index2], this.vint9_marginal_F, index2, this.vdouble__4_use_B[index2]);
				// Message to 'vdouble__4_marginal' from Variable factor
				this.vdouble__4_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Gamma>(this.vdouble__4_use_B[index2], this.VGamma__1[index2], this.vdouble__4_marginal_F[index2]);
			}
			// Message to 'vVector1_use' from Discrete factor
			this.vVector1_use_B = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint9_marginal_F, this.vVector1_use_B);
			// Message to 'vVector1_marginal' from Variable factor
			this.vVector1_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector1_use_B, this.VDirichlet1, this.vVector1_marginal_F);
			this.vdouble17_F = Gaussian.Uniform();
			DistributionStructArray<Bernoulli,bool> vint9_selector_cases_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vint9_selector_cases' Forwards messages.
			vint9_selector_cases_F = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				vint9_selector_cases_F[_iv] = Bernoulli.Uniform();
			}
			// Message to 'vint9_selector_cases' from CasesInt factor
			vint9_selector_cases_F = IntCasesOp.CasesAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(this.vint9_marginal_F, vint9_selector_cases_F);
			// Message to 'vdouble17' from Exit factor
			this.vdouble17_F = GateExitOp<double>.ExitAverageLogarithm<Gaussian>(vint9_selector_cases_F, vdouble17__index2__marginal_F, this.vdouble17_F);
			this.Changed_numberOfIterationsDecreased_vGamma__1_vGaussian__1_vDirichlet1_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__3Marginal()
		{
			return this.vdouble__3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> Vdouble__4Marginal()
		{
			return this.vdouble__4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet VVector1Marginal()
		{
			return this.vVector1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint9' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint9Marginal()
		{
			return this.vint9_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble17' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble17Marginal()
		{
			return this.vdouble17_F;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__1 and vGamma__1 and vDirichlet1</summary>
		private void Changed_vGaussian__1_vGamma__1_vDirichlet1()
		{
			if (this.Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone==1) {
				return ;
			}
			this.vGaussian__1_marginal = new PointMass<Gaussian[]>(this.VGaussian__1);
			this.vGamma__1_marginal = new PointMass<Gamma[]>(this.VGamma__1);
			this.vDirichlet1_marginal = new PointMass<Dirichlet>(this.VDirichlet1);
			this.Changed_vGaussian__1_vGamma__1_vDirichlet1_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__1Marginal()
		{
			return this.vGaussian__1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGamma__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gamma[]> VGamma__1Marginal()
		{
			return this.vGamma__1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vDirichlet1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> VDirichlet1Marginal()
		{
			return this.vDirichlet1_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
