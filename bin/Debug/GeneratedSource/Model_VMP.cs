// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 07:38 on marted√¨ 6 giugno 2017.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vGaussian__0 property</summary>
		private Gaussian[] VGaussian__0;
		/// <summary>Field backing the vGamma__0 property</summary>
		private Gamma[] VGamma__0;
		/// <summary>Field backing the vDirichlet0 property</summary>
		private Dirichlet VDirichlet0;
		/// <summary>Field backing the vint2 property</summary>
		private int Vint2;
		/// <summary>Field backing the vdouble__2 property</summary>
		private double[] Vdouble__2;
		/// <summary>The number of iterations last computed by Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2. Set this to zero to force re-execution of Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2</summary>
		public int Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0</summary>
		public int Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0. Set this to zero to force re-execution of Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0</summary>
		public int Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_iterationsDone;
		/// <summary>True if Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0 has performed initialisation. Set this to false to force re-execution of Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0</summary>
		public bool Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0</summary>
		public int Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0</summary>
		public bool Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised;
		/// <summary>The number of iterations last computed by Changed_vint2. Set this to zero to force re-execution of Changed_vint2</summary>
		public int Changed_vint2_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0. Set this to zero to force re-execution of Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0</summary>
		public int Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone;
		/// <summary>True if Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0 has performed initialisation. Set this to false to force re-execution of Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0</summary>
		public bool Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised;
		public DistributionRefArray<Discrete,int> vint__0_index1__selector_B;
		/// <summary>Message from use of 'vdouble__1'</summary>
		public DistributionStructArray<Gamma,double> vdouble__1_use_B;
		/// <summary>Message from use of 'vVector0'</summary>
		public Dirichlet vVector0_use_B;
		/// <summary>Message to marginal of 'vdouble__0'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__0_marginal_F;
		/// <summary>Message to marginal of 'vVector0'</summary>
		public Dirichlet vVector0_marginal_F;
		/// <summary>Message to marginal of 'vdouble__1'</summary>
		public DistributionStructArray<Gamma,double> vdouble__1_marginal_F;
		/// <summary>Message to marginal of 'vint__0'</summary>
		public DistributionRefArray<Discrete,int> vint__0_marginal_F;
		public PointMass<Gaussian[]> vGaussian__0_marginal;
		public PointMass<Gamma[]> vGamma__0_marginal;
		public PointMass<Dirichlet> vDirichlet0_marginal;
		public PointMass<int> vint2_marginal;
		public DistributionStructArray<Gaussian,double> vdouble__2_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__0'</summary>
		public Gaussian[] vGaussian__0
		{
			get {
				return this.VGaussian__0;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'vGaussian__0\'");
				}
				this.VGaussian__0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
				this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vGamma__0'</summary>
		public Gamma[] vGamma__0
		{
			get {
				return this.VGamma__0;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'vGamma__0\'");
				}
				this.VGamma__0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
				this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vDirichlet0'</summary>
		public Dirichlet vDirichlet0
		{
			get {
				return this.VDirichlet0;
			}
			set {
				this.VDirichlet0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
				this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vint2'</summary>
		public int vint2
		{
			get {
				return this.Vint2;
			}
			set {
				if (this.Vint2!=value) {
					this.Vint2 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vint2_iterationsDone = 0;
					this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
					this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
					this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
					this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble__2'</summary>
		public double[] vdouble__2
		{
			get {
				return this.Vdouble__2;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint2)+" was expected for variable \'vdouble__2\'");
				}
				this.Vdouble__2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
				this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vGaussian__0") {
				return this.vGaussian__0;
			}
			if (variableName=="vGamma__0") {
				return this.vGamma__0;
			}
			if (variableName=="vDirichlet0") {
				return this.vDirichlet0;
			}
			if (variableName=="vint2") {
				return this.vint2;
			}
			if (variableName=="vdouble__2") {
				return this.vdouble__2;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vGaussian__0") {
				this.vGaussian__0 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGamma__0") {
				this.vGamma__0 = (Gamma[])value;
				return ;
			}
			if (variableName=="vDirichlet0") {
				this.vDirichlet0 = (Dirichlet)value;
				return ;
			}
			if (variableName=="vint2") {
				this.vint2 = (int)value;
				return ;
			}
			if (variableName=="vdouble__2") {
				this.vdouble__2 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__0") {
				return this.Vdouble__0Marginal();
			}
			if (variableName=="vdouble__1") {
				return this.Vdouble__1Marginal();
			}
			if (variableName=="vVector0") {
				return this.VVector0Marginal();
			}
			if (variableName=="vint__0") {
				return this.Vint__0Marginal();
			}
			if (variableName=="vGaussian__0") {
				return this.VGaussian__0Marginal();
			}
			if (variableName=="vGamma__0") {
				return this.VGamma__0Marginal();
			}
			if (variableName=="vDirichlet0") {
				return this.VDirichlet0Marginal();
			}
			if (variableName=="vint2") {
				return this.Vint2Marginal();
			}
			if (variableName=="vdouble__2") {
				return this.Vdouble__2Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone) {
				this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = false;
				this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
			}
			this.Changed_vint2();
			this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0(initialise);
			this.Constant();
			this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0(initialise);
			this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0(initialise);
			this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0(numberOfIterations);
			this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that depend on the observed value of vint2</summary>
		private void Changed_vint2()
		{
			if (this.Changed_vint2_iterationsDone==1) {
				return ;
			}
			// Create array for replicates of 'vint__0_index1__selector_B'
			this.vint__0_index1__selector_B = new DistributionRefArray<Discrete,int>(this.Vint2);
			this.Changed_vint2_iterationsDone = 1;
			this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of vint2 and must reset on changes to numberOfIterationsDecreased and vGamma__0 and vdouble__2 and vGaussian__0 and vDirichlet0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0(bool initialise)
		{
			if ((this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone==1)&&((!initialise)||this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised)) {
				return ;
			}
			for(int index1 = 0; index1<this.Vint2; index1++) {
				this.vint__0_index1__selector_B[index1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 1;
			this.Changed_vint2_Init_numberOfIterationsDecreased_vGamma__0_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// Create array for 'vdouble__1_use' Backwards messages.
			this.vdouble__1_use_B = new DistributionStructArray<Gamma,double>(2);
			this.Constant_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and vGamma__0 and vint2 and vdouble__2 and vGaussian__0 and vDirichlet0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<2; index0++) {
				this.vdouble__1_use_B[index0] = Gamma.Uniform();
			}
			this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of vDirichlet0 and must reset on changes to numberOfIterationsDecreased and vGamma__0 and vint2 and vdouble__2 and vGaussian__0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0(bool initialise)
		{
			if ((this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_iterationsDone==1)&&((!initialise)||this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised)) {
				return ;
			}
			this.vVector0_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.VDirichlet0);
			this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_iterationsDone = 1;
			this.Changed_vDirichlet0_Init_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGamma__0 and vint2 and vdouble__2 and vGaussian__0 and vDirichlet0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone==numberOfIterations) {
				return ;
			}
			// Create array for 'vdouble__0_marginal' Forwards messages.
			this.vdouble__0_marginal_F = new DistributionStructArray<Gaussian,double>(2);
			for(int index0 = 0; index0<2; index0++) {
				this.vdouble__0_marginal_F[index0] = Gaussian.Uniform();
			}
			// Message from use of 'vdouble__0'
			DistributionStructArray<Gaussian,double> vdouble__0_use_B = default(DistributionStructArray<Gaussian,double>);
			// Create array for 'vdouble__0_use' Backwards messages.
			vdouble__0_use_B = new DistributionStructArray<Gaussian,double>(2);
			for(int index0 = 0; index0<2; index0++) {
				vdouble__0_use_B[index0] = Gaussian.Uniform();
			}
			DistributionRefArray<Dirichlet,Vector> vVector0_rep_B = default(DistributionRefArray<Dirichlet,Vector>);
			// Create array for 'vVector0_rep' Backwards messages.
			vVector0_rep_B = new DistributionRefArray<Dirichlet,Vector>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				vVector0_rep_B[index1] = ArrayHelper.MakeUniform<Dirichlet>(this.VDirichlet0);
			}
			this.vVector0_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.VDirichlet0);
			DistributionRefArray<Discrete,int> vint__0_F = default(DistributionRefArray<Discrete,int>);
			// Create array for 'vint__0' Forwards messages.
			vint__0_F = new DistributionRefArray<Discrete,int>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				vint__0_F[index1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			Discrete _hoist = default(Discrete);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				_hoist = ArrayHelper.CopyStorage<Discrete>(vint__0_F[index1]);
				index1 = this.Vint2-1;
			}
			// Create array for replicates of 'vint__0_index1__selector_uses_B'
			Discrete[][] vint__0_index1__selector_uses_B = new Discrete[this.Vint2][];
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Create array for 'vint__0_index1__selector_uses' Backwards messages.
				vint__0_index1__selector_uses_B[index1] = new Discrete[3];
				for(int _ind = 0; _ind<3; _ind++) {
					vint__0_index1__selector_uses_B[index1][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				}
			}
			// Create array for replicates of 'vint__0_index1__selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] vint__0_index1__selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.Vint2][];
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Create array for 'vint__0_index1__selector_cases_uses' Backwards messages.
				vint__0_index1__selector_cases_uses_B[index1] = new DistributionStructArray<Bernoulli,bool>[2];
				for(int _iv = 0; _iv<2; _iv++) {
					// Create array for 'vint__0_index1__selector_cases_uses' Backwards messages.
					vint__0_index1__selector_cases_uses_B[index1][_iv] = new DistributionStructArray<Bernoulli,bool>(5);
					for(int _ind = 0; _ind<5; _ind++) {
						vint__0_index1__selector_cases_uses_B[index1][_iv][_ind] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble__1_index0__B'
			DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> vdouble__1_index0__B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Create array for replicates of 'vdouble__1_index0__B'
				vdouble__1_index0__B[index1] = new DistributionStructArray<Gamma,double>(2);
				for(int index0 = 0; index0<2; index0++) {
					vdouble__1_index0__B[index1][index0] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__1_rep_B'
			DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> vdouble__1_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(2);
			for(int index0 = 0; index0<2; index0++) {
				// Create array for 'vdouble__1_rep' Backwards messages.
				vdouble__1_rep_B[index0] = new DistributionStructArray<Gamma,double>(this.Vint2);
				for(int index1 = 0; index1<this.Vint2; index1++) {
					vdouble__1_rep_B[index0][index1] = Gamma.Uniform();
				}
			}
			// Create array for 'vdouble__1_marginal' Forwards messages.
			this.vdouble__1_marginal_F = new DistributionStructArray<Gamma,double>(2);
			for(int index0 = 0; index0<2; index0++) {
				this.vdouble__1_marginal_F[index0] = Gamma.Uniform();
			}
			// Create array for replicates of 'vint__0_index1__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vint__0_index1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Create array for 'vint__0_index1__selector_cases' Backwards messages.
				vint__0_index1__selector_cases_B[index1] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _iv = 0; _iv<2; _iv++) {
					vint__0_index1__selector_cases_B[index1][_iv] = Bernoulli.Uniform();
				}
			}
			// Create array for 'vint__0_marginal' Forwards messages.
			this.vint__0_marginal_F = new DistributionRefArray<Discrete,int>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				this.vint__0_marginal_F[index1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			// Create array for replicates of 'vdouble__0_index0__B'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble__0_index0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint2);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Create array for replicates of 'vdouble__0_index0__B'
				vdouble__0_index0__B[index1] = new DistributionStructArray<Gaussian,double>(2);
				for(int index0 = 0; index0<2; index0++) {
					vdouble__0_index0__B[index1][index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__0_rep_B'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble__0_rep_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			for(int index0 = 0; index0<2; index0++) {
				// Create array for 'vdouble__0_rep' Backwards messages.
				vdouble__0_rep_B[index0] = new DistributionStructArray<Gaussian,double>(this.Vint2);
				for(int index1 = 0; index1<this.Vint2; index1++) {
					vdouble__0_rep_B[index0][index1] = Gaussian.Uniform();
				}
			}
			// Message to 'vVector0_marginal' from Variable factor
			this.vVector0_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector0_use_B, this.VDirichlet0, this.vVector0_marginal_F);
			for(int index1 = 0; index1<this.Vint2; index1++) {
				_hoist = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector0_marginal_F, _hoist);
				index1 = this.Vint2-1;
			}
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Message to 'vint__0_marginal' from Variable factor
				this.vint__0_marginal_F[index1] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint__0_index1__selector_B[index1], _hoist, this.vint__0_marginal_F[index1]);
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<2; index0++) {
					// Message to 'vdouble__1_marginal' from Variable factor
					this.vdouble__1_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Gamma>(this.vdouble__1_use_B[index0], this.VGamma__0[index0], this.vdouble__1_marginal_F[index0]);
					for(int index1 = 0; index1<this.Vint2; index1++) {
						// Message to 'vdouble__0_index0_' from Gaussian factor
						vdouble__0_index0__B[index1][index0] = GaussianOp.MeanAverageLogarithm(this.Vdouble__2[index1], this.vdouble__1_marginal_F[index0]);
						// Message to 'vdouble__0_rep' from EnterOne factor
						vdouble__0_rep_B[index0][index1] = GateEnterOneOp<double>.ValueAverageLogarithm<Gaussian>(vdouble__0_index0__B[index1][index0], this.vint__0_marginal_F[index1], index0, vdouble__0_rep_B[index0][index1]);
					}
					// Message to 'vdouble__0_use' from Replicate factor
					vdouble__0_use_B[index0] = ReplicateOp.DefAverageLogarithm<Gaussian>(vdouble__0_rep_B[index0], vdouble__0_use_B[index0]);
					// Message to 'vdouble__0_marginal' from Variable factor
					this.vdouble__0_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(vdouble__0_use_B[index0], this.VGaussian__0[index0], this.vdouble__0_marginal_F[index0]);
					for(int index1 = 0; index1<this.Vint2; index1++) {
						// Message to 'vint__0_index1__selector_cases_uses' from Gaussian factor
						vint__0_index1__selector_cases_uses_B[index1][index0][4] = Bernoulli.FromLogOdds(GaussianOp.AverageLogFactor(this.Vdouble__2[index1], this.vdouble__0_marginal_F[index0], this.vdouble__1_marginal_F[index0]));
					}
				}
				for(int index1 = 0; index1<this.Vint2; index1++) {
					for(int _iv = 0; _iv<2; _iv++) {
						// Message to 'vint__0_index1__selector_cases' from Replicate factor
						vint__0_index1__selector_cases_B[index1][_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint__0_index1__selector_cases_uses_B[index1][_iv], vint__0_index1__selector_cases_B[index1][_iv]);
					}
					// Message to 'vint__0_index1__selector_uses' from CasesInt factor
					vint__0_index1__selector_uses_B[index1][0] = IntCasesOp.IAverageLogarithm(vint__0_index1__selector_cases_B[index1], vint__0_index1__selector_uses_B[index1][0]);
					// Message to 'vint__0_index1__selector' from Replicate factor
					this.vint__0_index1__selector_B[index1] = ReplicateOp.DefAverageLogarithm<Discrete>(vint__0_index1__selector_uses_B[index1], this.vint__0_index1__selector_B[index1]);
				}
				// Message to 'vVector0_marginal' from Variable factor
				this.vVector0_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector0_use_B, this.VDirichlet0, this.vVector0_marginal_F);
				for(int index1 = 0; index1<this.Vint2; index1++) {
					_hoist = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector0_marginal_F, _hoist);
					index1 = this.Vint2-1;
				}
				for(int index1 = 0; index1<this.Vint2; index1++) {
					// Message to 'vint__0_marginal' from Variable factor
					this.vint__0_marginal_F[index1] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint__0_index1__selector_B[index1], _hoist, this.vint__0_marginal_F[index1]);
					for(int index0 = 0; index0<2; index0++) {
						// Message to 'vdouble__1_index0_' from Gaussian factor
						vdouble__1_index0__B[index1][index0] = GaussianOp.PrecisionAverageLogarithm(this.Vdouble__2[index1], this.vdouble__0_marginal_F[index0]);
						// Message to 'vdouble__1_rep' from EnterOne factor
						vdouble__1_rep_B[index0][index1] = GateEnterOneOp<double>.ValueAverageLogarithm<Gamma>(vdouble__1_index0__B[index1][index0], this.vint__0_marginal_F[index1], index0, vdouble__1_rep_B[index0][index1]);
					}
				}
				for(int index0 = 0; index0<2; index0++) {
					// Message to 'vdouble__1_use' from Replicate factor
					this.vdouble__1_use_B[index0] = ReplicateOp.DefAverageLogarithm<Gamma>(vdouble__1_rep_B[index0], this.vdouble__1_use_B[index0]);
				}
				for(int index1 = 0; index1<this.Vint2; index1++) {
					// Message to 'vVector0_rep' from Discrete factor
					vVector0_rep_B[index1] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint__0_marginal_F[index1], vVector0_rep_B[index1]);
				}
				// Message to 'vVector0_use' from Replicate factor
				this.vVector0_use_B = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector0_rep_B, this.vVector0_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index1 = 0; index1<this.Vint2; index1++) {
				for(int index0 = 0; index0<2; index0++) {
					// Message to 'vdouble__0_rep' from EnterOne factor
					vdouble__0_rep_B[index0][index1] = GateEnterOneOp<double>.ValueAverageLogarithm<Gaussian>(vdouble__0_index0__B[index1][index0], this.vint__0_marginal_F[index1], index0, vdouble__0_rep_B[index0][index1]);
				}
			}
			for(int index0 = 0; index0<2; index0++) {
				// Message to 'vdouble__0_use' from Replicate factor
				vdouble__0_use_B[index0] = ReplicateOp.DefAverageLogarithm<Gaussian>(vdouble__0_rep_B[index0], vdouble__0_use_B[index0]);
				// Message to 'vdouble__0_marginal' from Variable factor
				this.vdouble__0_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Gaussian>(vdouble__0_use_B[index0], this.VGaussian__0[index0], this.vdouble__0_marginal_F[index0]);
				for(int index1 = 0; index1<this.Vint2; index1++) {
					// Message to 'vint__0_index1__selector_cases_uses' from Gaussian factor
					vint__0_index1__selector_cases_uses_B[index1][index0][4] = Bernoulli.FromLogOdds(GaussianOp.AverageLogFactor(this.Vdouble__2[index1], this.vdouble__0_marginal_F[index0], this.vdouble__1_marginal_F[index0]));
				}
			}
			for(int index1 = 0; index1<this.Vint2; index1++) {
				for(int _iv = 0; _iv<2; _iv++) {
					// Message to 'vint__0_index1__selector_cases' from Replicate factor
					vint__0_index1__selector_cases_B[index1][_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint__0_index1__selector_cases_uses_B[index1][_iv], vint__0_index1__selector_cases_B[index1][_iv]);
				}
				// Message to 'vint__0_index1__selector_uses' from CasesInt factor
				vint__0_index1__selector_uses_B[index1][0] = IntCasesOp.IAverageLogarithm(vint__0_index1__selector_cases_B[index1], vint__0_index1__selector_uses_B[index1][0]);
				// Message to 'vint__0_index1__selector' from Replicate factor
				this.vint__0_index1__selector_B[index1] = ReplicateOp.DefAverageLogarithm<Discrete>(vint__0_index1__selector_uses_B[index1], this.vint__0_index1__selector_B[index1]);
				// Message to 'vint__0_marginal' from Variable factor
				this.vint__0_marginal_F[index1] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.vint__0_index1__selector_B[index1], _hoist, this.vint__0_marginal_F[index1]);
				for(int index0 = 0; index0<2; index0++) {
					// Message to 'vdouble__1_index0_' from Gaussian factor
					vdouble__1_index0__B[index1][index0] = GaussianOp.PrecisionAverageLogarithm(this.Vdouble__2[index1], this.vdouble__0_marginal_F[index0]);
					// Message to 'vdouble__1_rep' from EnterOne factor
					vdouble__1_rep_B[index0][index1] = GateEnterOneOp<double>.ValueAverageLogarithm<Gamma>(vdouble__1_index0__B[index1][index0], this.vint__0_marginal_F[index1], index0, vdouble__1_rep_B[index0][index1]);
				}
			}
			for(int index0 = 0; index0<2; index0++) {
				// Message to 'vdouble__1_use' from Replicate factor
				this.vdouble__1_use_B[index0] = ReplicateOp.DefAverageLogarithm<Gamma>(vdouble__1_rep_B[index0], this.vdouble__1_use_B[index0]);
				// Message to 'vdouble__1_marginal' from Variable factor
				this.vdouble__1_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Gamma>(this.vdouble__1_use_B[index0], this.VGamma__0[index0], this.vdouble__1_marginal_F[index0]);
			}
			for(int index1 = 0; index1<this.Vint2; index1++) {
				// Message to 'vVector0_rep' from Discrete factor
				vVector0_rep_B[index1] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint__0_marginal_F[index1], vVector0_rep_B[index1]);
			}
			// Message to 'vVector0_use' from Replicate factor
			this.vVector0_use_B = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector0_rep_B, this.vVector0_use_B);
			// Message to 'vVector0_marginal' from Variable factor
			this.vVector0_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector0_use_B, this.VDirichlet0, this.vVector0_marginal_F);
			this.Changed_numberOfIterationsDecreased_vGamma__0_vint2_vdouble__2_vGaussian__0_vDirichlet0_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__0Marginal()
		{
			return this.vdouble__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> Vdouble__1Marginal()
		{
			return this.vdouble__1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet VVector0Marginal()
		{
			return this.vVector0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__0Marginal()
		{
			return this.vint__0_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__0 and vGamma__0 and vDirichlet0 and vint2 and vdouble__2</summary>
		private void Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2()
		{
			if (this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone==1) {
				return ;
			}
			this.vGaussian__0_marginal = new PointMass<Gaussian[]>(this.VGaussian__0);
			this.vGamma__0_marginal = new PointMass<Gamma[]>(this.VGamma__0);
			this.vDirichlet0_marginal = new PointMass<Dirichlet>(this.VDirichlet0);
			this.vint2_marginal = new PointMass<int>(this.Vint2);
			this.vdouble__2_marginal = new DistributionStructArray<Gaussian,double>(this.Vint2, delegate(int index1) {
				return Gaussian.Uniform();
			});
			this.vdouble__2_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__2_marginal, this.Vdouble__2);
			this.Changed_vGaussian__0_vGamma__0_vDirichlet0_vint2_vdouble__2_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__0Marginal()
		{
			return this.vGaussian__0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGamma__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gamma[]> VGamma__0Marginal()
		{
			return this.vGamma__0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vDirichlet0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> VDirichlet0Marginal()
		{
			return this.vDirichlet0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint2Marginal()
		{
			return this.vint2_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__2Marginal()
		{
			return this.vdouble__2_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
